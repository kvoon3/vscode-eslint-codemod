import fsp from 'node:fs/promises'
import https from 'node:https'
import process from 'node:process'
import { parse } from '@babel/parser'
import traverse from '@babel/traverse'
import { kebabCase } from 'scule'

const RAW_URL = 'https://raw.githubusercontent.com/antfu/eslint-plugin-command/main/src/commands/index.ts'

async function fetchCommands() {
  return new Promise((resolve, reject) => {
    https.get(RAW_URL, (res) => {
      let data = ''
      res.on('data', chunk => data += chunk)
      res.on('end', () => resolve(data))
    }).on('error', reject)
  })
}

function extractCommands(code) {
  const ast = parse(code, {
    sourceType: 'module',
    plugins: ['typescript'],
  })

  const commandNames = new Set()

  traverse.default(ast, {
    // ExportNamedDeclaration(path) {
    //   path.node.specifiers?.forEach(s => commands.add(s.exported.name))
    // },
    VariableDeclarator(path) {
      if (path.node.id.name === 'builtinCommands') {
        path.node.init.elements.forEach(el => commandNames.add(kebabCase(el.name)))
      }
    },
  })

  // TODO: make a pr to correct typo of `hoist-reg-exp`
  return Array.from(commandNames).map(i => ({ name: i === 'hoist-reg-exp' ? 'hoist-regexp' : i }))
}

async function updateRepo(commands) {
  const targetFile = './src/generated/commands.ts'
  const content = [
    '// Auto-generated by update-builtin-commands script',
    `export const builtinCommandNames = ${JSON.stringify(commands, null, 2)} as const`,
  ].join('\n')

  await fsp.writeFile(targetFile, content)
}

(async () => {
  try {
    const code = await fetchCommands()
    const commands = extractCommands(code)
    await updateRepo(commands)
  }
  catch (error) {
    console.error('Failed:', error)
    process.exit(1)
  }
})()
